	// OBS: Para ajudar a usar a linguagem Groovy, entre no Pipeline do Projeto, Procurar por "Pipeline" e clique em "Pipeline Syntax"
	// 	Ex: http://localhost:8008/job/PipelineBack/pipeline-syntax/
pipeline {
    agent any
    stages {
        stage ('Build Backend') {
            steps {
                bat 'mvn clean package -DskipTests=true'
            }
        }
        stage ('Unit Tests') {
            steps {
                bat 'mvn test'
            }
        }
        // stage ('Sonar Analysis') {
        //     environment {
        //         // Procure em-> Painel de Controle -> Gerenciar Jenkins -> Ferramenta de configuração global -> 
        //         //   Procurar "SonarQube Scanner" e veja o nome da variável criada para ele. Ex: SONAR_SCANNER
        //         scannerHome = tool 'SONAR_SCANNER'
        //     }
        //     steps {

        //         // Procure em-> Painel de Controle -> Gerenciar Jenkins -> Configurar Sistema -> Procurar "SonarQube servers" e veja o nome da variável criada para ele. Ex: SONARQUBE_LOCAL
        //         withSonarQubeEnv('SONARQUBE_LOCAL') {
        //             bat "${scannerHome}/bin/sonar-scanner -e -Dsonar.projectKey=DeployBack -Dsonar.host.url=http://localhost:9000 -Dsonar.login=ac3d04f5dd982d1a6514cc8c7038fe02d85f0e67 -Dsonar.java.binaries=target -Dsonar.coverage.exclusions=**/.mvn/**,**/src/test/**,**/model/**,**Application.java "
        //         }

        //     }
        // }
        // stage ('Quality Gate') {
        //     steps {
        //         sleep(20)
        //         timeout(time: 1, unit:'MINUTES') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        stage ('Deploy Backend') {
            steps {
                deploy adapters: [tomcat8(credentialsId: 'TomcatLogin', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks-backend', war: 'target/tasks-backend.war'
            }
        }
        stage ('API Test') {
            steps {
                dir('api-test') {  // Mudando o diretório da execução dos testes de API
                    git branch: 'main', credentialsId: 'GithubLogin', url: 'https://github.com/marconunesrj/api-test'
                    bat 'mvn test'
                }
            }
        }
        stage ('Deploy Frontend') {
            steps {
                dir('frontend') {  
                    git branch: 'master', credentialsId: 'GithubLogin', url: 'https://github.com/marconunesrj/tasks-frontend'
                    bat 'mvn clean package'
                    deploy adapters: [tomcat8(credentialsId: 'TomcatLogin', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks', war: 'target/tasks.war'
                }
            }
        }
        stage ('Functional Test') {
            steps {
                dir('functional-test') {  
                    git branch: 'main', credentialsId: 'GithubLogin', url: 'https://github.com/marconunesrj/functional-test'
                    bat 'mvn test'
                }
            }
        }
        stage ('Deploy Production') {
            steps {
                bat 'docker-compose build'
                bat 'docker-compose up -d'
            }
        }
        stage ('Health Check') {
            steps {
                dir('functional-test') {  
                    sleep(10)  // Ajustar o tempo de acordo com a máquina onde for ser executado 
                    bat 'mvn verify -Dskip.surefire.tests'
                }
            }
        }
    }
    post {
        always {
            junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml, api-test/target/surefire-reports/*.xml, , functional-test/target/surefire-reports/*.xml, , functional-test/target/failsafe-reports/*.xml'
            dir('builds') {  
                // TODO: Criar uma copia do arquivo .war com o _build_$BUILD_NUMBER para ser salvo
                bat """ copy /y ../target/tasks-backend.war tasks-backend_build_${BUILD_NUMBER}.war"""
                bat """ copy /y  ../frontend/target/tasks_build.war tasks_build_${BUILD_NUMBER}.war"""
            }
            archiveArtifacts artifacts: """builds/tasks-backend_build_${BUILD_NUMBER}.war, builds/tasks_build_${BUILD_NUMBER}.war""", followSymlinks: false, onlyIfSuccessful: true
            // archiveArtifacts artifacts: """target/tasks-backend.war, frontend/target/tasks.war""", followSymlinks: false, onlyIfSuccessful: true
        }
        unsuccessful {
            emailext attachLog: true, body: 'See the attached log below', subject: 'Build $BUILD_NUMBER has failed', to: 'marconunes.rj+jenkins@gmail.com'
        }
        fixed {
            emailext attachLog: true, body: 'See the attached log below', subject: 'Build is fine!!!', to: 'marconunes.rj+jenkins@gmail.com'
        }
    }
}
// -Dsonar.login=1483e23e606001714eb56b9875ec95567c2cc5a1  (Notebook-Marco)
// -Dsonar.login=ac3d04f5dd982d1a6514cc8c7038fe02d85f0e67 (Desktop-Marco)		
